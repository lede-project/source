--- a/arch/arm/mach-ixp4xx/Kconfig
+++ b/arch/arm/mach-ixp4xx/Kconfig
@@ -176,6 +176,15 @@ config ARCH_PRPMC1100
 	  PrPCM1100 Processor Mezanine Module. For more information on
 	  this platform, see <file:Documentation/arm/IXP4xx>.
 
+config MACH_TW2662
+        bool "Titan Wireless TW-266-2"
+        select PCI
+        help
+          Say 'Y' here if you want your kernel to support the Titan
+          Wireless TW266-2. For more information on this platform,
+          see http://openwrt.org
+
+
 config MACH_TW5334
 	bool "Titan Wireless TW-533-4"
 	select PCI
--- a/arch/arm/mach-ixp4xx/Makefile
+++ b/arch/arm/mach-ixp4xx/Makefile
@@ -25,6 +25,7 @@ obj-pci-$(CONFIG_MACH_SIDEWINDER)	+= sid
 obj-pci-$(CONFIG_MACH_COMPEXWP18)	+= ixdp425-pci.o
 obj-pci-$(CONFIG_MACH_WRT300NV2)		+= wrt300nv2-pci.o
 obj-pci-$(CONFIG_MACH_AP1000)		+= ixdp425-pci.o
+obj-pci-$(CONFIG_MACH_TW2662)		+= tw2662-pci.o
 obj-pci-$(CONFIG_MACH_TW5334)		+= tw5334-pci.o
 obj-pci-$(CONFIG_MACH_MI424WR)		+= mi424wr-pci.o
 obj-pci-$(CONFIG_MACH_USR8200)		+= usr8200-pci.o
@@ -54,6 +55,7 @@ obj-$(CONFIG_MACH_SIDEWINDER)	+= sidewin
 obj-$(CONFIG_MACH_COMPEXWP18)	+= compex42x-setup.o
 obj-$(CONFIG_MACH_WRT300NV2)	+= wrt300nv2-setup.o
 obj-$(CONFIG_MACH_AP1000)	+= ap1000-setup.o
+obj-$(CONFIG_MACH_TW2662)	+= tw2662-setup.o
 obj-$(CONFIG_MACH_TW5334)	+= tw5334-setup.o
 obj-$(CONFIG_MACH_MI424WR)	+= mi424wr-setup.o
 obj-$(CONFIG_MACH_USR8200)	+= usr8200-setup.o
--- a/arch/arm/mach-ixp4xx/include/mach/uncompress.h
+++ b/arch/arm/mach-ixp4xx/include/mach/uncompress.h
@@ -45,7 +45,7 @@ static __inline__ void __arch_decomp_set
 	    machine_is_devixp() || machine_is_miccpt() || machine_is_mic256() ||
 	    machine_is_pronghorn() || machine_is_pronghorn_metro() ||
 	    machine_is_wrt300nv2() || machine_is_tw5334() ||
-	    machine_is_usr8200())
+	    machine_is_usr8200() || machine_is_tw2662())
 		uart_base = (volatile u32*) IXP4XX_UART2_BASE_PHYS;
 	else
 		uart_base = (volatile u32*) IXP4XX_UART1_BASE_PHYS;
--- /dev/null
+++ b/arch/arm/mach-ixp4xx/tw2662-pci.c
@@ -0,0 +1,67 @@
+/*
+ * arch/arm/mach-ixp4xx/tw2662-pci.c
+ *
+ * PCI setup routines for Tiran Wireless TW-266-2 platform
+ *
+ * Copyright (C) 2002 Jungo Software Technologies.
+ * Copyright (C) 2003 MontaVista Softwrae, Inc.
+ * Copyright (C) 2010 Alexandros C. Couloumbis <alex@ozo.com>
+ * Copyright (C) 2010 Gabor Juhos <juhosg@openwrt.org>
+ *
+ * Maintainer: Deepak Saxena <dsaxena@mvista.com>
+ * Maintainer: Alexandros C. Couloumbis <alex@ozo.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/pci.h>
+#include <linux/init.h>
+#include <linux/irq.h>
+#include <asm/mach-types.h>
+#include <mach/hardware.h>
+#include <asm/irq.h>
+#include <asm/mach/pci.h>
+
+#define SLOT0_DEVID	1
+#define SLOT1_DEVID	3
+
+/* PCI controller GPIO to IRQ pin mappings */
+#define SLOT0_INTA	11
+#define SLOT1_INTA	9
+
+void __init tw2662_pci_preinit(void)
+{
+	irq_set_irq_type(IXP4XX_GPIO_IRQ(SLOT0_INTA), IRQ_TYPE_LEVEL_LOW);
+	irq_set_irq_type(IXP4XX_GPIO_IRQ(SLOT1_INTA), IRQ_TYPE_LEVEL_LOW);
+	ixp4xx_pci_preinit();
+}
+
+static int __init tw2662_map_irq(const struct pci_dev *dev, u8 slot, u8 pin)
+{
+	if (slot == SLOT0_DEVID)
+		return IXP4XX_GPIO_IRQ(SLOT0_INTA);
+	else if (slot == SLOT1_DEVID)
+		return IXP4XX_GPIO_IRQ(SLOT1_INTA);
+	else return -1;
+}
+
+struct hw_pci tw2662_pci __initdata = {
+	.nr_controllers = 1,
+	.preinit =        tw2662_pci_preinit,
+	.ops =            &ixp4xx_ops,
+	.setup =          ixp4xx_setup,
+	.map_irq =        tw2662_map_irq,
+};
+
+int __init tw2662_pci_init(void)
+{
+        if (machine_is_tw2662())
+		pci_common_init(&tw2662_pci);
+        return 0;
+}
+
+subsys_initcall(tw2662_pci_init);
--- /dev/null
+++ b/arch/arm/mach-ixp4xx/tw2662-setup.c
@@ -0,0 +1,197 @@
+/*
+ * arch/arm/mach-ixp4xx/tw2662-setup.c
+ *
+ * Titan Wireless TW-266-2
+ *
+ * Copyright (C) 2010 Gabor Juhos <juhosg@openwrt.org>
+ * Copyright (C) 2010 Alexandros C. Couloumbis <alex@ozo.com>
+ *
+ * based on ap1000-setup.c:
+ * 	Author: Imre Kaloz <Kaloz@openwrt.org>
+ */
+
+#include <linux/if_ether.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/device.h>
+#include <linux/serial.h>
+#include <linux/tty.h>
+#include <linux/serial_8250.h>
+#include <linux/slab.h>
+#include <linux/netdevice.h>
+#include <linux/etherdevice.h>
+#include <linux/platform_device.h>
+
+#include <asm/io.h>
+#include <asm/types.h>
+#include <asm/setup.h>
+#include <asm/memory.h>
+#include <mach/hardware.h>
+#include <asm/mach-types.h>
+#include <asm/irq.h>
+#include <asm/mach/arch.h>
+#include <asm/mach/flash.h>
+
+/* gpio mask used by platform device */
+#define TW2662_GPIO_MASK        (1 << 1) | (1 << 3) | (1 << 5) | (1 << 7)
+
+static struct flash_platform_data tw2662_flash_data = {
+	.map_name	= "cfi_probe",
+	.width		= 2,
+};
+
+static struct resource tw2662_flash_resource = {
+	.flags		= IORESOURCE_MEM,
+};
+
+static struct platform_device tw2662_flash = {
+	.name		= "IXP4XX-Flash",
+	.id		= 0,
+	.dev		= {
+		.platform_data = &tw2662_flash_data,
+	},
+	.num_resources	= 1,
+	.resource	= &tw2662_flash_resource,
+};
+
+static struct resource tw2662_uart_resources[] = {
+	{
+		.start		= IXP4XX_UART1_BASE_PHYS,
+		.end		= IXP4XX_UART1_BASE_PHYS + 0x0fff,
+		.flags		= IORESOURCE_MEM
+	},
+	{
+		.start		= IXP4XX_UART2_BASE_PHYS,
+		.end		= IXP4XX_UART2_BASE_PHYS + 0x0fff,
+		.flags		= IORESOURCE_MEM
+	}
+};
+
+static struct plat_serial8250_port tw2662_uart_data[] = {
+	{
+		.mapbase	= IXP4XX_UART1_BASE_PHYS,
+		.membase	= (char *)IXP4XX_UART1_BASE_VIRT + REG_OFFSET,
+		.irq		= IRQ_IXP4XX_UART1,
+		.flags		= UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
+		.iotype		= UPIO_MEM,
+		.regshift	= 2,
+		.uartclk	= IXP4XX_UART_XTAL,
+	},
+	{
+		.mapbase	= IXP4XX_UART2_BASE_PHYS,
+		.membase	= (char *)IXP4XX_UART2_BASE_VIRT + REG_OFFSET,
+		.irq		= IRQ_IXP4XX_UART2,
+		.flags		= UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
+		.iotype		= UPIO_MEM,
+		.regshift	= 2,
+		.uartclk	= IXP4XX_UART_XTAL,
+	},
+	{ },
+};
+
+static struct platform_device tw2662_uart = {
+	.name			= "serial8250",
+	.id			= PLAT8250_DEV_PLATFORM,
+	.dev.platform_data	= tw2662_uart_data,
+	.num_resources		= 2,
+	.resource		= tw2662_uart_resources
+};
+
+/* Built-in 10/100 Ethernet MAC interfaces */
+static struct eth_plat_info tw2662_plat_eth[] = {
+        {
+                .phy            = 3,
+                .rxq            = 3,
+                .txreadyq       = 20,
+        }, {
+                .phy            = 1,
+                .rxq            = 4,
+                .txreadyq       = 21,
+        }
+};
+
+static struct platform_device tw2662_eth[] = {
+	{
+		.name			= "ixp4xx_eth",
+		.id			= IXP4XX_ETH_NPEB,
+		.dev.platform_data	= tw2662_plat_eth,
+		.dev.coherent_dma_mask	= DMA_BIT_MASK(32),
+	}, {
+		.name			= "ixp4xx_eth",
+		.id			= IXP4XX_ETH_NPEC,
+		.dev.platform_data	= tw2662_plat_eth + 1,
+		.dev.coherent_dma_mask	= DMA_BIT_MASK(32),
+	}
+};
+
+
+static struct platform_device *tw2662_devices[] __initdata = {
+	&tw2662_flash,
+	&tw2662_uart,
+	&tw2662_eth[0],
+	&tw2662_eth[1],
+};
+
+static char tw2662_mem_fixup[] __initdata = "mem=64M ";
+
+static void __init tw2662_fixup(struct tag *tags, char **cmdline,
+				struct meminfo *mi)
+{
+	struct tag *t = tags;
+	char *p = *cmdline;
+
+	/* Find the end of the tags table, taking note of any cmdline tag. */
+	for (; t->hdr.size; t = tag_next(t)) {
+		if (t->hdr.tag == ATAG_CMDLINE) {
+			p = t->u.cmdline.cmdline;
+		}
+	}
+
+	/* Overwrite the end of the table with a new cmdline tag. */
+	t->hdr.tag = ATAG_CMDLINE;
+	t->hdr.size = (sizeof (struct tag_header) +
+		strlen(tw2662_mem_fixup) + strlen(p) + 1 + 4) >> 2;
+	strlcpy(t->u.cmdline.cmdline, tw2662_mem_fixup, COMMAND_LINE_SIZE);
+	strlcpy(t->u.cmdline.cmdline + strlen(tw2662_mem_fixup), p,
+		COMMAND_LINE_SIZE - strlen(tw2662_mem_fixup));
+
+	/* Terminate the table. */
+	t = tag_next(t);
+	t->hdr.tag = ATAG_NONE;
+	t->hdr.size = 0;
+}
+
+static void __init tw2662_init(void)
+{
+	ixp4xx_sys_init();
+
+	tw2662_flash_resource.start = IXP4XX_EXP_BUS_BASE(0);
+	tw2662_flash_resource.end =
+		IXP4XX_EXP_BUS_BASE(0) + ixp4xx_exp_bus_size - 1;
+
+	platform_add_devices(tw2662_devices, ARRAY_SIZE(tw2662_devices));
+
+	if (!(is_valid_ether_addr(tw2662_plat_eth[0].hwaddr)))
+		random_ether_addr(tw2662_plat_eth[0].hwaddr);
+	if (!(is_valid_ether_addr(tw2662_plat_eth[1].hwaddr))) {
+		memcpy(tw2662_plat_eth[1].hwaddr, tw2662_plat_eth[0].hwaddr, ETH_ALEN);
+		tw2662_plat_eth[1].hwaddr[5] = (tw2662_plat_eth[0].hwaddr[5] + 1);
+	}
+
+}
+
+#ifdef CONFIG_MACH_TW2662
+MACHINE_START(TW2662, "Titan Wireless TW-266-2")
+	/* Maintainer: Alexandros C. Couloumbis <alex@ozo.com> */
+	.fixup		= tw2662_fixup,
+	.map_io		= ixp4xx_map_io,
+	.init_irq	= ixp4xx_init_irq,
+	.init_time	= ixp4xx_timer_init,
+	.atag_offset	= 0x0100,
+	.init_machine	= tw2662_init,
+#if defined(CONFIG_PCI)
+	.dma_zone_size	= SZ_64M,
+#endif
+	.restart	= ixp4xx_restart,
+MACHINE_END
+#endif
