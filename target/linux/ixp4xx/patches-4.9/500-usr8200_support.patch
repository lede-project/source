--- a/arch/arm/mach-ixp4xx/Kconfig
+++ b/arch/arm/mach-ixp4xx/Kconfig
@@ -93,6 +93,14 @@ config MACH_SIDEWINDER
 	  Engineering Sidewinder board. For more information on this
 	  platform, see http://www.adiengineering.com
 
+config MACH_USR8200
+	bool "USRobotics USR8200"
+	select PCI
+	help
+	  Say 'Y' here if you want your kernel to support the USRobotics
+	  USR8200 router board. For more information on this platform, see
+	  http://openwrt.org
+
 config MACH_COMPEXWP18
 	bool "Compex WP18 / NP18A"
 	select PCI
--- a/arch/arm/mach-ixp4xx/Makefile
+++ b/arch/arm/mach-ixp4xx/Makefile
@@ -27,6 +27,7 @@ obj-pci-$(CONFIG_MACH_WRT300NV2)		+= wrt
 obj-pci-$(CONFIG_MACH_AP1000)		+= ixdp425-pci.o
 obj-pci-$(CONFIG_MACH_TW5334)		+= tw5334-pci.o
 obj-pci-$(CONFIG_MACH_MI424WR)		+= mi424wr-pci.o
+obj-pci-$(CONFIG_MACH_USR8200)		+= usr8200-pci.o
 
 obj-y	+= common.o
 
@@ -55,6 +56,7 @@ obj-$(CONFIG_MACH_WRT300NV2)	+= wrt300nv
 obj-$(CONFIG_MACH_AP1000)	+= ap1000-setup.o
 obj-$(CONFIG_MACH_TW5334)	+= tw5334-setup.o
 obj-$(CONFIG_MACH_MI424WR)	+= mi424wr-setup.o
+obj-$(CONFIG_MACH_USR8200)	+= usr8200-setup.o
 
 obj-$(CONFIG_PCI)		+= $(obj-pci-$(CONFIG_PCI)) common-pci.o
 obj-$(CONFIG_IXP4XX_QMGR)	+= ixp4xx_qmgr.o
--- a/arch/arm/mach-ixp4xx/include/mach/uncompress.h
+++ b/arch/arm/mach-ixp4xx/include/mach/uncompress.h
@@ -44,7 +44,8 @@ static __inline__ void __arch_decomp_set
 	    machine_is_gateway7001() || machine_is_wg302v2() ||
 	    machine_is_devixp() || machine_is_miccpt() || machine_is_mic256() ||
 	    machine_is_pronghorn() || machine_is_pronghorn_metro() ||
-	    machine_is_wrt300nv2() || machine_is_tw5334())
+	    machine_is_wrt300nv2() || machine_is_tw5334() ||
+	    machine_is_usr8200())
 		uart_base = (volatile u32*) IXP4XX_UART2_BASE_PHYS;
 	else
 		uart_base = (volatile u32*) IXP4XX_UART1_BASE_PHYS;
--- /dev/null
+++ b/arch/arm/mach-ixp4xx/usr8200-pci.c
@@ -0,0 +1,77 @@
+/*
+ * arch/arch/mach-ixp4xx/usr8200-pci.c
+ *
+ * PCI setup routines for USRobotics USR8200
+ *
+ * Copyright (C) 2008 Peter Denison <openwrt@marshadder.org>
+ *
+ * based on pronghorn-pci.c
+ * 	Copyright (C) 2008 Imre Kaloz <kaloz@openwrt.org>
+ * based on coyote-pci.c:
+ *	Copyright (C) 2002 Jungo Software Technologies.
+ *	Copyright (C) 2003 MontaVista Softwrae, Inc.
+ *
+ * Maintainer: Peter Denison <openwrt@marshadder.org>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/pci.h>
+#include <linux/init.h>
+#include <linux/irq.h>
+
+#include <asm/mach-types.h>
+#include <mach/hardware.h>
+
+#include <asm/mach/pci.h>
+
+void __init usr8200_pci_preinit(void)
+{
+	irq_set_irq_type(IRQ_IXP4XX_GPIO7, IRQ_TYPE_LEVEL_LOW);
+	irq_set_irq_type(IRQ_IXP4XX_GPIO8, IRQ_TYPE_LEVEL_LOW);
+	irq_set_irq_type(IRQ_IXP4XX_GPIO9, IRQ_TYPE_LEVEL_LOW);
+	irq_set_irq_type(IRQ_IXP4XX_GPIO10, IRQ_TYPE_LEVEL_LOW);
+	irq_set_irq_type(IRQ_IXP4XX_GPIO11, IRQ_TYPE_LEVEL_LOW);
+
+	ixp4xx_pci_preinit();
+}
+
+static int __init usr8200_map_irq(const struct pci_dev *dev, u8 slot, u8 pin)
+{
+	if (slot == 14)
+		return IRQ_IXP4XX_GPIO7;
+	else if (slot == 15)
+		return IRQ_IXP4XX_GPIO8;
+	else if (slot == 16) {
+		if (pin == 1)
+			return IRQ_IXP4XX_GPIO11;
+		else if (pin == 2)
+			return IRQ_IXP4XX_GPIO10;
+		else if (pin == 3)
+			return IRQ_IXP4XX_GPIO9;
+		else
+			return -1;
+	} else
+		return -1;
+}
+
+struct hw_pci usr8200_pci __initdata = {
+	.nr_controllers	= 1,
+	.preinit	= usr8200_pci_preinit,
+	.ops		= &ixp4xx_ops,
+	.setup		= ixp4xx_setup,
+	.map_irq	= usr8200_map_irq,
+};
+
+int __init usr8200_pci_init(void)
+{
+	if (machine_is_usr8200())
+		pci_common_init(&usr8200_pci);
+	return 0;
+}
+
+subsys_initcall(usr8200_pci_init);
--- /dev/null
+++ b/arch/arm/mach-ixp4xx/usr8200-setup.c
@@ -0,0 +1,217 @@
+/*
+ * arch/arm/mach-ixp4xx/usr8200-setup.c
+ *
+ * Board setup for the USRobotics USR8200
+ *
+ * Copyright (C) 2008 Peter Denison <openwrt@marshadder.org>
+ *
+ * based on pronghorn-setup.c:
+ * 	Copyright (C) 2008 Imre Kaloz <kaloz@openwrt.org>
+ * based on coyote-setup.c:
+ *      Copyright (C) 2003-2005 MontaVista Software, Inc.
+ *
+ * Author: Peter Denison <openwrt@marshadder.org>
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/device.h>
+#include <linux/serial.h>
+#include <linux/tty.h>
+#include <linux/serial_8250.h>
+#include <linux/slab.h>
+#include <linux/types.h>
+#include <linux/memory.h>
+#include <linux/i2c-gpio.h>
+#include <linux/leds.h>
+#include <linux/dma-mapping.h>
+
+#include <asm/setup.h>
+#include <mach/hardware.h>
+#include <asm/irq.h>
+#include <asm/mach-types.h>
+#include <asm/mach/arch.h>
+#include <asm/mach/flash.h>
+
+static struct flash_platform_data usr8200_flash_data = {
+	.map_name	= "cfi_probe",
+	.width		= 2,
+};
+
+static struct resource usr8200_flash_resource = {
+	.flags		= IORESOURCE_MEM,
+};
+
+static struct platform_device usr8200_flash = {
+	.name		= "IXP4XX-Flash",
+	.id		= 0,
+	.dev		= {
+		.platform_data	= &usr8200_flash_data,
+	},
+	.num_resources	= 1,
+	.resource	= &usr8200_flash_resource,
+};
+
+static struct resource usr8200_uart_resources [] = {
+	{
+		.start		= IXP4XX_UART2_BASE_PHYS,
+		.end		= IXP4XX_UART2_BASE_PHYS + 0x0fff,
+		.flags		= IORESOURCE_MEM
+	},
+	{
+		.start		= IXP4XX_UART1_BASE_PHYS,
+		.end		= IXP4XX_UART1_BASE_PHYS + 0x0fff,
+		.flags		= IORESOURCE_MEM
+	}
+};
+
+static struct plat_serial8250_port usr8200_uart_data[] = {
+	{
+		.mapbase	= IXP4XX_UART2_BASE_PHYS,
+		.membase	= (char *)IXP4XX_UART2_BASE_VIRT + REG_OFFSET,
+		.irq		= IRQ_IXP4XX_UART2,
+		.flags		= UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
+		.iotype		= UPIO_MEM,
+		.regshift	= 2,
+		.uartclk	= IXP4XX_UART_XTAL,
+	},
+	{
+		.mapbase	= IXP4XX_UART1_BASE_PHYS,
+		.membase	= (char *)IXP4XX_UART1_BASE_VIRT + REG_OFFSET,
+		.irq		= IRQ_IXP4XX_UART1,
+		.flags		= UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
+		.iotype		= UPIO_MEM,
+		.regshift	= 2,
+		.uartclk	= IXP4XX_UART_XTAL,
+	},
+	{ },
+};
+
+static struct platform_device usr8200_uart = {
+	.name		= "serial8250",
+	.id		= PLAT8250_DEV_PLATFORM,
+	.dev		= {
+		.platform_data	= usr8200_uart_data,
+	},
+	.num_resources	= 2,
+	.resource	= usr8200_uart_resources,
+};
+
+static struct gpio_led usr8200_led_pin[] = {
+	{
+		.name		= "usr8200:usb1",
+		.gpio		= 0,
+		.active_low	= 1,
+	},
+	{
+		.name		= "usr8200:usb2",
+		.gpio		= 1,
+		.active_low	= 1,
+	},
+	{
+		.name		= "usr8200:ieee1394",
+		.gpio		= 2,
+		.active_low	= 1,
+	},
+	{
+		.name		= "usr8200:internal",
+		.gpio		= 3,
+		.active_low	= 1,
+	},
+	{
+		.name		= "usr8200:power",
+		.gpio		= 14,
+	}
+};
+
+static struct gpio_led_platform_data usr8200_led_data = {
+	.num_leds		= ARRAY_SIZE(usr8200_led_pin),
+	.leds			= usr8200_led_pin,
+};
+
+static struct platform_device usr8200_led = {
+	.name			= "leds-gpio",
+	.id			= -1,
+	.dev.platform_data	= &usr8200_led_data,
+};
+
+static struct eth_plat_info usr8200_plat_eth[] = {
+	{ /* NPEC - LAN with Marvell 88E6060 switch */
+		.phy		= IXP4XX_ETH_PHY_MAX_ADDR,
+		.phy_mask	= 0x0F0000,
+		.rxq		= 4,
+		.txreadyq	= 21,
+	}, { /* NPEB - WAN */
+		.phy		= 9,
+		.rxq		= 3,
+		.txreadyq	= 20,
+	}
+};
+
+static struct platform_device usr8200_eth[] = {
+	{
+		.name			= "ixp4xx_eth",
+		.id			= IXP4XX_ETH_NPEC,
+		.dev.platform_data	= usr8200_plat_eth,
+		.dev.coherent_dma_mask	= DMA_BIT_MASK(32),
+	}, {
+		.name			= "ixp4xx_eth",
+		.id			= IXP4XX_ETH_NPEB,
+		.dev.platform_data	= usr8200_plat_eth + 1,
+		.dev.coherent_dma_mask	= DMA_BIT_MASK(32),
+	}
+};
+
+static struct resource usr8200_rtc_resources = {
+	.flags		= IORESOURCE_MEM
+};
+
+static struct platform_device usr8200_rtc = {
+	.name		= "rtc7301",
+	.id		= 0,
+	.num_resources	= 1,
+	.resource	= &usr8200_rtc_resources,
+};
+
+static struct platform_device *usr8200_devices[] __initdata = {
+	&usr8200_flash,
+	&usr8200_uart,
+	&usr8200_led,
+	&usr8200_eth[0],
+	&usr8200_eth[1],
+	&usr8200_rtc,
+};
+
+static void __init usr8200_init(void)
+{
+	ixp4xx_sys_init();
+
+	usr8200_flash_resource.start = IXP4XX_EXP_BUS_BASE(0);
+	usr8200_flash_resource.end = IXP4XX_EXP_BUS_BASE(0) + SZ_16M - 1;
+
+	usr8200_rtc_resources.start = IXP4XX_EXP_BUS_BASE(2);
+	usr8200_rtc_resources.end = IXP4XX_EXP_BUS_BASE(2) + 0x01ff;
+
+	*IXP4XX_EXP_CS0 |= IXP4XX_FLASH_WRITABLE;
+	*IXP4XX_EXP_CS2 = 0x3fff000 | IXP4XX_EXP_BUS_SIZE(0) | IXP4XX_EXP_BUS_WR_EN |
+	                  IXP4XX_EXP_BUS_CS_EN | IXP4XX_EXP_BUS_BYTE_EN;
+	*IXP4XX_GPIO_GPCLKR = 0x01100000;
+
+	/* configure button as input */
+	gpio_line_config(12, IXP4XX_GPIO_IN);
+
+	platform_add_devices(usr8200_devices, ARRAY_SIZE(usr8200_devices));
+}
+
+MACHINE_START(USR8200, "USRobotics USR8200")
+	/* Maintainer: Peter Denison <openwrt@marshadder.org> */
+	.map_io		= ixp4xx_map_io,
+	.init_irq	= ixp4xx_init_irq,
+	.init_time	= ixp4xx_timer_init,
+	.atag_offset	= 0x0100,
+	.init_machine	= usr8200_init,
+#if defined(CONFIG_PCI)
+	.dma_zone_size	= SZ_64M,
+#endif
+	.restart	= ixp4xx_restart,
+MACHINE_END
