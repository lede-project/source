--- a/arch/arm/mach-ixp4xx/Kconfig
+++ b/arch/arm/mach-ixp4xx/Kconfig
@@ -160,6 +160,14 @@ config ARCH_PRPMC1100
 	  PrPCM1100 Processor Mezanine Module. For more information on
 	  this platform, see <file:Documentation/arm/IXP4xx>.
 
+config MACH_TW5334
+	bool "Titan Wireless TW-533-4"
+	select PCI
+	help
+	  Say 'Y' here if you want your kernel to support the Titan
+	  Wireless TW533-4. For more information on this platform,
+	  see http://openwrt.org
+
 config MACH_NAS100D
 	bool
 	prompt "NAS100D"
--- a/arch/arm/mach-ixp4xx/Makefile
+++ b/arch/arm/mach-ixp4xx/Makefile
@@ -24,6 +24,7 @@ obj-pci-$(CONFIG_MACH_SIDEWINDER)	+= sid
 obj-pci-$(CONFIG_MACH_COMPEXWP18)	+= ixdp425-pci.o
 obj-pci-$(CONFIG_MACH_WRT300NV2)		+= wrt300nv2-pci.o
 obj-pci-$(CONFIG_MACH_AP1000)		+= ixdp425-pci.o
+obj-pci-$(CONFIG_MACH_TW5334)		+= tw5334-pci.o
 
 obj-y	+= common.o
 
@@ -49,6 +50,7 @@ obj-$(CONFIG_MACH_SIDEWINDER)	+= sidewin
 obj-$(CONFIG_MACH_COMPEXWP18)	+= compex42x-setup.o
 obj-$(CONFIG_MACH_WRT300NV2)	+= wrt300nv2-setup.o
 obj-$(CONFIG_MACH_AP1000)	+= ap1000-setup.o
+obj-$(CONFIG_MACH_TW5334)	+= tw5334-setup.o
 
 obj-$(CONFIG_PCI)		+= $(obj-pci-$(CONFIG_PCI)) common-pci.o
 obj-$(CONFIG_IXP4XX_QMGR)	+= ixp4xx_qmgr.o
--- a/arch/arm/mach-ixp4xx/include/mach/uncompress.h
+++ b/arch/arm/mach-ixp4xx/include/mach/uncompress.h
@@ -44,7 +44,7 @@ static __inline__ void __arch_decomp_set
 	    machine_is_gateway7001() || machine_is_wg302v2() ||
 	    machine_is_devixp() || machine_is_miccpt() || machine_is_mic256() ||
 	    machine_is_pronghorn() || machine_is_pronghorn_metro() ||
-	    machine_is_wrt300nv2())
+	    machine_is_wrt300nv2() || machine_is_tw5334())
 		uart_base = (volatile u32*) IXP4XX_UART2_BASE_PHYS;
 	else
 		uart_base = (volatile u32*) IXP4XX_UART1_BASE_PHYS;
--- /dev/null
+++ b/arch/arm/mach-ixp4xx/tw5334-pci.c
@@ -0,0 +1,68 @@
+/*
+ * arch/arch/mach-ixp4xx/tw5334-pci.c
+ *
+ * PCI setup routines for the Titan Wireless TW-533-4
+ *
+ * Copyright (C) 2008 Imre Kaloz <kaloz@openwrt.org>
+ *
+ * based on coyote-pci.c:
+ *	Copyright (C) 2002 Jungo Software Technologies.
+ *	Copyright (C) 2003 MontaVista Softwrae, Inc.
+ *
+ * Maintainer: Imre Kaloz <kaloz@openwrt.org>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/pci.h>
+#include <linux/init.h>
+#include <linux/irq.h>
+
+#include <asm/mach-types.h>
+#include <mach/hardware.h>
+
+#include <asm/mach/pci.h>
+
+void __init tw5334_pci_preinit(void)
+{
+	irq_set_irq_type(IRQ_IXP4XX_GPIO6, IRQ_TYPE_LEVEL_LOW);
+	irq_set_irq_type(IRQ_IXP4XX_GPIO2, IRQ_TYPE_LEVEL_LOW);
+	irq_set_irq_type(IRQ_IXP4XX_GPIO1, IRQ_TYPE_LEVEL_LOW);
+	irq_set_irq_type(IRQ_IXP4XX_GPIO0, IRQ_TYPE_LEVEL_LOW);
+
+	ixp4xx_pci_preinit();
+}
+
+static int __init tw5334_map_irq(const struct pci_dev *dev, u8 slot, u8 pin)
+{
+	if (slot == 12)
+		return IRQ_IXP4XX_GPIO6;
+	else if (slot == 13)
+		return IRQ_IXP4XX_GPIO2;
+	else if (slot == 14)
+		return IRQ_IXP4XX_GPIO1;
+	else if (slot == 15)
+		return IRQ_IXP4XX_GPIO0;
+	else return -1;
+}
+
+struct hw_pci tw5334_pci __initdata = {
+	.nr_controllers = 1,
+	.preinit =        tw5334_pci_preinit,
+	.ops =            &ixp4xx_ops,
+	.setup =          ixp4xx_setup,
+	.map_irq =        tw5334_map_irq,
+};
+
+int __init tw5334_pci_init(void)
+{
+	if (machine_is_tw5334())
+		pci_common_init(&tw5334_pci);
+	return 0;
+}
+
+subsys_initcall(tw5334_pci_init);
--- /dev/null
+++ b/arch/arm/mach-ixp4xx/tw5334-setup.c
@@ -0,0 +1,167 @@
+/*
+ * arch/arm/mach-ixp4xx/tw5334-setup.c
+ *
+ * Board setup for the Titan Wireless TW-533-4
+ *
+ * Copyright (C) 2008 Imre Kaloz <kaloz@openwrt.org>
+ *
+ * based on coyote-setup.c:
+ *      Copyright (C) 2003-2005 MontaVista Software, Inc.
+ *
+ * Author: Imre Kaloz <Kaloz@openwrt.org>
+ */
+
+#include <linux/if_ether.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/device.h>
+#include <linux/serial.h>
+#include <linux/tty.h>
+#include <linux/serial_8250.h>
+#include <linux/slab.h>
+
+#include <asm/types.h>
+#include <asm/setup.h>
+#include <asm/memory.h>
+#include <mach/hardware.h>
+#include <asm/irq.h>
+#include <asm/mach-types.h>
+#include <asm/mach/arch.h>
+#include <asm/mach/flash.h>
+
+static struct flash_platform_data tw5334_flash_data = {
+	.map_name	= "cfi_probe",
+	.width		= 2,
+};
+
+static struct resource tw5334_flash_resource = {
+	.flags		= IORESOURCE_MEM,
+};
+
+static struct platform_device tw5334_flash = {
+	.name		= "IXP4XX-Flash",
+	.id		= 0,
+	.dev		= {
+		.platform_data = &tw5334_flash_data,
+	},
+	.num_resources	= 1,
+	.resource	= &tw5334_flash_resource,
+};
+
+static struct resource tw5334_uart_resource = {
+	.start	= IXP4XX_UART2_BASE_PHYS,
+	.end	= IXP4XX_UART2_BASE_PHYS + 0x0fff,
+	.flags	= IORESOURCE_MEM,
+};
+
+static struct plat_serial8250_port tw5334_uart_data[] = {
+	{
+		.mapbase	= IXP4XX_UART2_BASE_PHYS,
+		.membase	= (char *)IXP4XX_UART2_BASE_VIRT + REG_OFFSET,
+		.irq		= IRQ_IXP4XX_UART2,
+		.flags		= UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
+		.iotype		= UPIO_MEM,
+		.regshift	= 2,
+		.uartclk	= IXP4XX_UART_XTAL,
+	},
+	{ },
+};
+
+static struct platform_device tw5334_uart = {
+	.name		= "serial8250",
+	.id		= PLAT8250_DEV_PLATFORM,
+	.dev			= {
+		.platform_data	= tw5334_uart_data,
+	},
+	.num_resources	= 1,
+	.resource	= &tw5334_uart_resource,
+};
+
+/* Built-in 10/100 Ethernet MAC interfaces */
+static struct eth_plat_info tw5334_plat_eth[] = {
+        {
+                .phy            = 0,
+                .rxq            = 3,
+		.txreadyq	= 20,
+        }, {
+                .phy            = 1,
+                .rxq            = 4,
+		.txreadyq	= 21,
+	}
+};
+
+static struct platform_device tw5334_eth[] = {
+        {
+                .name                   = "ixp4xx_eth",
+                .id                     = IXP4XX_ETH_NPEB,
+                .dev.platform_data      = tw5334_plat_eth,
+		.dev.coherent_dma_mask	= DMA_BIT_MASK(32),
+        }, {
+                .name                   = "ixp4xx_eth",
+                .id                     = IXP4XX_ETH_NPEC,
+                .dev.platform_data      = tw5334_plat_eth + 1,
+		.dev.coherent_dma_mask	= DMA_BIT_MASK(32),
+	}
+};
+
+static struct platform_device *tw5334_devices[] __initdata = {
+	&tw5334_flash,
+	&tw5334_uart,
+	&tw5334_eth[0],
+	&tw5334_eth[1],
+};
+
+static void __init tw5334_init(void)
+{
+	uint8_t __iomem *f;
+	int i;
+
+	ixp4xx_sys_init();
+
+	tw5334_flash_resource.start = IXP4XX_EXP_BUS_BASE(0);
+	tw5334_flash_resource.end = IXP4XX_EXP_BUS_BASE(0) + SZ_32M - 1;
+
+	*IXP4XX_EXP_CS0 |= IXP4XX_FLASH_WRITABLE;
+	*IXP4XX_EXP_CS1 = *IXP4XX_EXP_CS0;
+
+	platform_add_devices(tw5334_devices, ARRAY_SIZE(tw5334_devices));
+
+	/*
+	 * Map in a portion of the flash and read the MAC addresses.
+	 * Since it is stored in BE in the flash itself, we need to
+	 * byteswap it if we're in LE mode.
+	 */
+	f = ioremap(IXP4XX_EXP_BUS_BASE(0), 0x1000000);
+	if (f) {
+		for (i = 0; i < 6; i++) {
+#ifdef __ARMEB__
+			tw5334_plat_eth[0].hwaddr[i] = readb(f + 0xFC0422 + i);
+			tw5334_plat_eth[1].hwaddr[i] = readb(f + 0xFC043B + i);
+#else
+			tw5334_plat_eth[0].hwaddr[i] = readb(f + 0xFC0422 + (i^3));
+			tw5334_plat_eth[1].hwaddr[i] = readb(f + 0xFC043B + (i^3));
+#endif
+		}
+		iounmap(f);
+	}
+
+	printk(KERN_INFO "TW-533-4: Using MAC address %pM for port 0\n",
+		tw5334_plat_eth[0].hwaddr);
+	printk(KERN_INFO "TW-533-4: Using MAC address %pM for port 1\n",
+		tw5334_plat_eth[1].hwaddr);
+}
+
+#ifdef CONFIG_MACH_TW5334
+MACHINE_START(TW5334, "Titan Wireless TW-533-4")
+	/* Maintainer: Imre Kaloz <kaloz@openwrt.org> */
+	.map_io		= ixp4xx_map_io,
+	.init_irq	= ixp4xx_init_irq,
+	.init_time	= ixp4xx_timer_init,
+	.atag_offset	= 0x0100,
+	.init_machine	= tw5334_init,
+#if defined(CONFIG_PCI)
+	.dma_zone_size	= SZ_64M,
+#endif
+	.restart	= ixp4xx_restart,
+MACHINE_END
+#endif
