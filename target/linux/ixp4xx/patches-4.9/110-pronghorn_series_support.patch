--- a/arch/arm/configs/ixp4xx_defconfig
+++ b/arch/arm/configs/ixp4xx_defconfig
@@ -15,6 +15,8 @@ CONFIG_ARCH_ADI_COYOTE=y
 CONFIG_MACH_GATEWAY7001=y
 CONFIG_MACH_WG302V1=y
 CONFIG_MACH_WG302V2=y
+CONFIG_MACH_PRONGHORN=y
+CONFIG_MACH_PRONGHORNMETRO=y
 CONFIG_ARCH_IXDP425=y
 CONFIG_MACH_IXDPG425=y
 CONFIG_MACH_IXDP465=y
--- a/arch/arm/mach-ixp4xx/Kconfig
+++ b/arch/arm/mach-ixp4xx/Kconfig
@@ -61,6 +61,22 @@ config MACH_WG302V2
 	  WG302 v2 or WAG302 v2 Access Points. For more information
 	  on this platform, see http://openwrt.org
 
+config MACH_PRONGHORN
+	bool "ADI Pronghorn series"
+	select PCI
+	help
+	  Say 'Y' here if you want your kernel to support the ADI
+	  Engineering Pronghorn series. For more
+	  information on this platform, see http://www.adiengineering.com
+
+#
+# There're only minimal differences kernel-wise between the Pronghorn and
+# Pronghorn Metro boards - they use different chip selects to drive the
+# CF slot connected to the expansion bus, so we just enable them together.
+#
+config MACH_PRONGHORNMETRO
+	def_bool MACH_PRONGHORN
+
 config ARCH_IXDP425
 	bool "IXDP425"
 	help
--- a/arch/arm/mach-ixp4xx/Makefile
+++ b/arch/arm/mach-ixp4xx/Makefile
@@ -19,6 +19,7 @@ obj-pci-$(CONFIG_MACH_WG302V1)		+= wg302
 obj-pci-$(CONFIG_MACH_WG302V2)		+= wg302v2-pci.o
 obj-pci-$(CONFIG_MACH_FSG)		+= fsg-pci.o
 obj-pci-$(CONFIG_MACH_ARCOM_VULCAN)	+= vulcan-pci.o
+obj-pci-$(CONFIG_MACH_PRONGHORN)	+= pronghorn-pci.o
 
 obj-y	+= common.o
 
@@ -39,6 +40,7 @@ obj-$(CONFIG_MACH_WG302V2)	+= wg302v2-se
 obj-$(CONFIG_MACH_FSG)		+= fsg-setup.o
 obj-$(CONFIG_MACH_GORAMO_MLR)	+= goramo_mlr.o
 obj-$(CONFIG_MACH_ARCOM_VULCAN)	+= vulcan-setup.o
+obj-$(CONFIG_MACH_PRONGHORN)	+= pronghorn-setup.o
 
 obj-$(CONFIG_PCI)		+= $(obj-pci-$(CONFIG_PCI)) common-pci.o
 obj-$(CONFIG_IXP4XX_QMGR)	+= ixp4xx_qmgr.o
--- a/arch/arm/mach-ixp4xx/include/mach/uncompress.h
+++ b/arch/arm/mach-ixp4xx/include/mach/uncompress.h
@@ -42,7 +42,8 @@ static __inline__ void __arch_decomp_set
 	 */
 	if (machine_is_adi_coyote() || machine_is_gtwx5715() ||
 	    machine_is_gateway7001() || machine_is_wg302v2() ||
-	    machine_is_devixp() || machine_is_miccpt() || machine_is_mic256())
+	    machine_is_devixp() || machine_is_miccpt() || machine_is_mic256() ||
+	    machine_is_pronghorn() || machine_is_pronghorn_metro())
 		uart_base = (volatile u32*) IXP4XX_UART2_BASE_PHYS;
 	else
 		uart_base = (volatile u32*) IXP4XX_UART1_BASE_PHYS;
--- /dev/null
+++ b/arch/arm/mach-ixp4xx/pronghorn-pci.c
@@ -0,0 +1,69 @@
+/*
+ * arch/arch/mach-ixp4xx/pronghorn-pci.c
+ *
+ * PCI setup routines for ADI Engineering Pronghorn series
+ *
+ * Copyright (C) 2008 Imre Kaloz <kaloz@openwrt.org>
+ *
+ * based on coyote-pci.c:
+ *	Copyright (C) 2002 Jungo Software Technologies.
+ *	Copyright (C) 2003 MontaVista Softwrae, Inc.
+ *
+ * Maintainer: Imre Kaloz <kaloz@openwrt.org>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/pci.h>
+#include <linux/init.h>
+#include <linux/irq.h>
+
+#include <asm/mach-types.h>
+#include <mach/hardware.h>
+
+#include <asm/mach/pci.h>
+
+void __init pronghorn_pci_preinit(void)
+{
+	irq_set_irq_type(IRQ_IXP4XX_GPIO4, IRQ_TYPE_LEVEL_LOW);
+	irq_set_irq_type(IRQ_IXP4XX_GPIO6, IRQ_TYPE_LEVEL_LOW);
+	irq_set_irq_type(IRQ_IXP4XX_GPIO11, IRQ_TYPE_LEVEL_LOW);
+	irq_set_irq_type(IRQ_IXP4XX_GPIO1, IRQ_TYPE_LEVEL_LOW);
+
+	ixp4xx_pci_preinit();
+}
+
+static int __init pronghorn_map_irq(const struct pci_dev *dev, u8 slot, u8 pin)
+{
+	if (slot == 13)
+		return IRQ_IXP4XX_GPIO4;
+	else if (slot == 14)
+		return IRQ_IXP4XX_GPIO6;
+	else if (slot == 15)
+		return IRQ_IXP4XX_GPIO11;
+	else if (slot == 16)
+		return IRQ_IXP4XX_GPIO1;
+	else
+		return -1;
+}
+
+struct hw_pci pronghorn_pci __initdata = {
+	.nr_controllers	= 1,
+	.preinit	= pronghorn_pci_preinit,
+	.ops		= &ixp4xx_ops,
+	.setup		= ixp4xx_setup,
+	.map_irq	= pronghorn_map_irq,
+};
+
+int __init pronghorn_pci_init(void)
+{
+	if (machine_is_pronghorn() || machine_is_pronghorn_metro())
+		pci_common_init(&pronghorn_pci);
+	return 0;
+}
+
+subsys_initcall(pronghorn_pci_init);
--- /dev/null
+++ b/arch/arm/mach-ixp4xx/pronghorn-setup.c
@@ -0,0 +1,252 @@
+/*
+ * arch/arm/mach-ixp4xx/pronghorn-setup.c
+ *
+ * Board setup for the ADI Engineering Pronghorn series
+ *
+ * Copyright (C) 2008 Imre Kaloz <Kaloz@openwrt.org>
+ *
+ * based on coyote-setup.c:
+ *      Copyright (C) 2003-2005 MontaVista Software, Inc.
+ *
+ * Author: Imre Kaloz <Kaloz@openwrt.org>
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/device.h>
+#include <linux/serial.h>
+#include <linux/tty.h>
+#include <linux/serial_8250.h>
+#include <linux/slab.h>
+#include <linux/types.h>
+#include <linux/memory.h>
+#include <linux/i2c-gpio.h>
+#include <linux/leds.h>
+#include <linux/dma-mapping.h>
+
+#include <asm/setup.h>
+#include <mach/hardware.h>
+#include <asm/irq.h>
+#include <asm/mach-types.h>
+#include <asm/mach/arch.h>
+#include <asm/mach/flash.h>
+
+static struct flash_platform_data pronghorn_flash_data = {
+	.map_name	= "cfi_probe",
+	.width		= 2,
+};
+
+static struct resource pronghorn_flash_resource = {
+	.flags		= IORESOURCE_MEM,
+};
+
+static struct platform_device pronghorn_flash = {
+	.name		= "IXP4XX-Flash",
+	.id		= 0,
+	.dev		= {
+		.platform_data	= &pronghorn_flash_data,
+	},
+	.num_resources	= 1,
+	.resource	= &pronghorn_flash_resource,
+};
+
+static struct resource pronghorn_uart_resources [] = {
+	{
+		.start		= IXP4XX_UART1_BASE_PHYS,
+		.end		= IXP4XX_UART1_BASE_PHYS + 0x0fff,
+		.flags		= IORESOURCE_MEM
+	},
+	{
+		.start		= IXP4XX_UART2_BASE_PHYS,
+		.end		= IXP4XX_UART2_BASE_PHYS + 0x0fff,
+		.flags		= IORESOURCE_MEM
+	}
+};
+
+static struct plat_serial8250_port pronghorn_uart_data[] = {
+	{
+		.mapbase	= IXP4XX_UART1_BASE_PHYS,
+		.membase	= (char *)IXP4XX_UART1_BASE_VIRT + REG_OFFSET,
+		.irq		= IRQ_IXP4XX_UART1,
+		.flags		= UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
+		.iotype		= UPIO_MEM,
+		.regshift	= 2,
+		.uartclk	= IXP4XX_UART_XTAL,
+	},
+	{
+		.mapbase	= IXP4XX_UART2_BASE_PHYS,
+		.membase	= (char *)IXP4XX_UART2_BASE_VIRT + REG_OFFSET,
+		.irq		= IRQ_IXP4XX_UART2,
+		.flags		= UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
+		.iotype		= UPIO_MEM,
+		.regshift	= 2,
+		.uartclk	= IXP4XX_UART_XTAL,
+	},
+	{ },
+};
+
+static struct platform_device pronghorn_uart = {
+	.name		= "serial8250",
+	.id		= PLAT8250_DEV_PLATFORM,
+	.dev		= {
+		.platform_data	= pronghorn_uart_data,
+	},
+	.num_resources	= 2,
+	.resource	= pronghorn_uart_resources,
+};
+
+static struct i2c_gpio_platform_data pronghorn_i2c_gpio_data = {
+	.sda_pin	= 9,
+	.scl_pin	= 10,
+};
+
+static struct platform_device pronghorn_i2c_gpio = {
+	.name		= "i2c-gpio",
+	.id		= 0,
+	.dev		= {
+		.platform_data	= &pronghorn_i2c_gpio_data,
+	},
+};
+
+static struct gpio_led pronghorn_led_pin[] = {
+	{
+		.name		= "pronghorn:green:status",
+		.gpio		= 7,
+	}
+};
+
+static struct gpio_led_platform_data pronghorn_led_data = {
+	.num_leds		= 1,
+	.leds			= pronghorn_led_pin,
+};
+
+static struct platform_device pronghorn_led = {
+	.name			= "leds-gpio",
+	.id			= -1,
+	.dev.platform_data	= &pronghorn_led_data,
+};
+
+static struct resource pronghorn_pata_resources[] = {
+	{
+		.flags	= IORESOURCE_MEM
+	},
+	{
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.name	= "intrq",
+		.start	= IRQ_IXP4XX_GPIO0,
+		.end	= IRQ_IXP4XX_GPIO0,
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static struct ixp4xx_pata_data pronghorn_pata_data = {
+	.cs0_bits	= 0xbfff0043,
+	.cs1_bits	= 0xbfff0043,
+};
+
+static struct platform_device pronghorn_pata = {
+	.name			= "pata_ixp4xx_cf",
+	.id			= 0,
+	.dev.platform_data      = &pronghorn_pata_data,
+	.num_resources		= ARRAY_SIZE(pronghorn_pata_resources),
+	.resource		= pronghorn_pata_resources,
+};
+
+static struct eth_plat_info pronghorn_plat_eth[] = {
+	{
+		.phy		= 0,
+		.rxq		= 3,
+		.txreadyq	= 20,
+	}, {
+		.phy		= 1,
+		.rxq		= 4,
+		.txreadyq	= 21,
+	}
+};
+
+static struct platform_device pronghorn_eth[] = {
+	{
+		.name			= "ixp4xx_eth",
+		.id			= IXP4XX_ETH_NPEB,
+		.dev.platform_data	= pronghorn_plat_eth,
+		.dev.coherent_dma_mask	= DMA_BIT_MASK(32),
+	}, {
+		.name			= "ixp4xx_eth",
+		.id			= IXP4XX_ETH_NPEC,
+		.dev.platform_data	= pronghorn_plat_eth + 1,
+		.dev.coherent_dma_mask	= DMA_BIT_MASK(32),
+	}
+};
+
+static struct platform_device *pronghorn_devices[] __initdata = {
+	&pronghorn_flash,
+	&pronghorn_uart,
+	&pronghorn_led,
+	&pronghorn_eth[0],
+	&pronghorn_eth[1],
+};
+
+static void __init pronghorn_init(void)
+{
+	ixp4xx_sys_init();
+
+	pronghorn_flash_resource.start = IXP4XX_EXP_BUS_BASE(0);
+	pronghorn_flash_resource.end = IXP4XX_EXP_BUS_BASE(0) + SZ_32M - 1;
+
+	*IXP4XX_EXP_CS0 |= IXP4XX_FLASH_WRITABLE;
+	*IXP4XX_EXP_CS1 = *IXP4XX_EXP_CS0;
+
+	platform_add_devices(pronghorn_devices, ARRAY_SIZE(pronghorn_devices));
+
+	if (machine_is_pronghorn()) {
+		pronghorn_pata_resources[0].start = IXP4XX_EXP_BUS_BASE(2);
+		pronghorn_pata_resources[0].end = IXP4XX_EXP_BUS_END(2);
+
+		pronghorn_pata_resources[1].start = IXP4XX_EXP_BUS_BASE(3);
+		pronghorn_pata_resources[1].end = IXP4XX_EXP_BUS_END(3);
+
+		pronghorn_pata_data.cs0_cfg = IXP4XX_EXP_CS2;
+		pronghorn_pata_data.cs1_cfg = IXP4XX_EXP_CS3;
+	} else {
+		pronghorn_pata_resources[0].start = IXP4XX_EXP_BUS_BASE(3);
+		pronghorn_pata_resources[0].end = IXP4XX_EXP_BUS_END(3);
+
+		pronghorn_pata_resources[1].start = IXP4XX_EXP_BUS_BASE(4);
+		pronghorn_pata_resources[1].end = IXP4XX_EXP_BUS_END(4);
+
+		pronghorn_pata_data.cs0_cfg = IXP4XX_EXP_CS3;
+		pronghorn_pata_data.cs1_cfg = IXP4XX_EXP_CS4;
+
+		platform_device_register(&pronghorn_i2c_gpio);
+	}
+
+	platform_device_register(&pronghorn_pata);
+}
+
+MACHINE_START(PRONGHORN, "ADI Engineering Pronghorn")
+	/* Maintainer: Imre Kaloz <kaloz@openwrt.org> */
+	.map_io		= ixp4xx_map_io,
+	.init_irq	= ixp4xx_init_irq,
+	.init_time	= ixp4xx_timer_init,
+	.atag_offset	= 0x0100,
+	.init_machine	= pronghorn_init,
+#if defined(CONFIG_PCI)
+	.dma_zone_size	= SZ_64M,
+#endif
+	.restart	= ixp4xx_restart,
+MACHINE_END
+
+MACHINE_START(PRONGHORNMETRO, "ADI Engineering Pronghorn Metro")
+	/* Maintainer: Imre Kaloz <kaloz@openwrt.org> */
+	.map_io		= ixp4xx_map_io,
+	.init_irq	= ixp4xx_init_irq,
+	.init_time	= ixp4xx_timer_init,
+	.atag_offset	= 0x0100,
+	.init_machine	= pronghorn_init,
+#if defined(CONFIG_PCI)
+	.dma_zone_size	= SZ_64M,
+#endif
+	.restart	= ixp4xx_restart,
+MACHINE_END
