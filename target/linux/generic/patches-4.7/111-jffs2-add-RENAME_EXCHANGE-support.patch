From: Felix Fietkau <nbd@nbd.name>
Date: Sat, 25 Apr 2015 12:41:32 +0200
Subject: [PATCH] jffs2: add RENAME_EXCHANGE support

Signed-off-by: Felix Fietkau <nbd@nbd.name>
---

--- a/fs/jffs2/dir.c
+++ b/fs/jffs2/dir.c
@@ -782,7 +782,7 @@ static int jffs2_rename (struct inode *o
 	uint8_t type;
 	uint32_t now;
 
-	if (flags & ~RENAME_WHITEOUT)
+	if (flags & ~(RENAME_WHITEOUT | RENAME_EXCHANGE))
 		return -EINVAL;
 
 	/* The VFS will check for us and prevent trying to rename a
@@ -790,7 +790,7 @@ static int jffs2_rename (struct inode *o
 	 * the VFS can't check whether the victim is empty. The filesystem
 	 * needs to do that for itself.
 	 */
-	if (d_really_is_positive(new_dentry)) {
+	if (d_really_is_positive(new_dentry) && !(flags & RENAME_EXCHANGE)) {
 		victim_f = JFFS2_INODE_INFO(d_inode(new_dentry));
 		if (d_is_dir(new_dentry)) {
 			struct jffs2_full_dirent *fd;
@@ -825,7 +825,7 @@ static int jffs2_rename (struct inode *o
 	if (ret)
 		return ret;
 
-	if (victim_f) {
+	if (victim_f && !(flags & RENAME_EXCHANGE)) {
 		/* There was a victim. Kill it off nicely */
 		if (d_is_dir(new_dentry))
 			clear_nlink(d_inode(new_dentry));
@@ -851,6 +851,12 @@ static int jffs2_rename (struct inode *o
 	if (flags & RENAME_WHITEOUT)
 		/* Replace with whiteout */
 		ret = jffs2_whiteout(old_dir_i, old_dentry);
+	else if (flags & RENAME_EXCHANGE)
+		/* Replace the original */
+		ret = jffs2_do_link(c, JFFS2_INODE_INFO(old_dir_i),
+				    d_inode(new_dentry)->i_ino, type,
+				    old_dentry->d_name.name, old_dentry->d_name.len,
+				    now);
 	else
 		/* Unlink the original */
 		ret = jffs2_do_unlink(c, JFFS2_INODE_INFO(old_dir_i),
@@ -882,7 +888,7 @@ static int jffs2_rename (struct inode *o
 		return ret;
 	}
 
-	if (d_is_dir(old_dentry))
+	if (d_is_dir(old_dentry) && !(flags & RENAME_EXCHANGE))
 		drop_nlink(old_dir_i);
 
 	new_dir_i->i_mtime = new_dir_i->i_ctime = old_dir_i->i_mtime = old_dir_i->i_ctime = ITIME(now);
