--- a/arch/mips/rb532/devices.c
+++ b/arch/mips/rb532/devices.c
@@ -141,6 +141,19 @@ static struct platform_device cf_slot0 =
 };
 
 /* Resources and device for NAND */
+
+/*
+ * We need to use the OLD Yaffs-1 OOB layout, otherwise the RB bootloader
+ * will not be able to find the kernel that we load.  So set the oobinfo
+ * when creating the partitions
+ */
+static struct nand_ecclayout rb532_nand_ecclayout = {
+	.eccbytes       = 6,
+	.eccpos         = { 8, 9, 10, 13, 14, 15 },
+	.oobavail       = 9,
+	.oobfree        = { { 0, 4 }, { 6, 2 }, { 11, 2 }, { 4, 1 } }
+};
+
 static int rb532_dev_ready(struct mtd_info *mtd)
 {
 	return gpio_get_value(GPIO_RDY);
@@ -255,6 +268,16 @@ static struct platform_device *rb532_dev
 /* NAND definitions */
 #define NAND_CHIP_DELAY 25
 
+static int rb532_nand_fixup(struct mtd_info *mtd)
+{
+	struct nand_chip *chip = mtd->priv;
+
+	if (mtd->writesize == 512)
+		chip->ecc.layout = &rb532_nand_ecclayout;
+
+	return 0;
+}
+
 static void __init rb532_nand_setup(void)
 {
 	switch (mips_machtype) {
@@ -273,6 +296,7 @@ static void __init rb532_nand_setup(void
 	rb532_nand_data.chip.nr_partitions = ARRAY_SIZE(rb532_partition_info);
 	rb532_nand_data.chip.partitions = rb532_partition_info;
 	rb532_nand_data.chip.chip_delay = NAND_CHIP_DELAY;
+	rb532_nand_data.chip.chip_fixup = &rb532_nand_fixup;
 }
 
 
