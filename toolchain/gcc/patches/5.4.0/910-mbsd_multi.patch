
	This patch brings over a few features from MirBSD:
	* -fhonour-copts
	  If this option is not given, it's warned (depending
	  on environment variables). This is to catch errors
	  of misbuilt packages which override CFLAGS themselves.
	* -Werror-maybe-reset
	  Has the effect of -Wno-error if GCC_NO_WERROR is
	  set and not '0', a no-operation otherwise. This is
	  to be able to use -Werror in "make" but prevent
	  GNU autoconf generated configure scripts from
	  freaking out.

	This patch was authored by Thorsten Glaser <tg at mirbsd.de>
	with copyright assignment to the FSF in effect.

--- a/gcc/c-family/c-opts.c
+++ b/gcc/c-family/c-opts.c
@@ -122,6 +122,9 @@ static int class_dump_flags;
 /* Whether any standard preincluded header has been preincluded.  */
 static bool done_preinclude;
 
+/* Check if a port honours COPTS.  */
+static int honour_copts = 0;
+
 static void handle_OPT_d (const char *);
 static void set_std_cxx98 (int);
 static void set_std_cxx11 (int);
@@ -449,6 +452,12 @@ c_common_handle_option (size_t scode, co
       flag_no_builtin = !value;
       break;
 
+    case OPT_fhonour_copts:
+      if (c_language == clk_c) {
+        honour_copts++;
+      }
+      break;
+
     case OPT_fconstant_string_class_:
       constant_string_class_name = arg;
       break;
@@ -1034,6 +1043,47 @@ c_common_init (void)
       return false;
     }
 
+  if (c_language == clk_c) {
+    char *ev = getenv ("GCC_HONOUR_COPTS");
+    int evv;
+    if (ev == NULL)
+      evv = -1;
+    else if ((*ev == '0') || (*ev == '\0'))
+      evv = 0;
+    else if (*ev == '1')
+      evv = 1;
+    else if (*ev == '2')
+      evv = 2;
+    else if (*ev == 's')
+      evv = -1;
+    else {
+      warning (0, "unknown GCC_HONOUR_COPTS value, assuming 1");
+      evv = 1; /* maybe depend this on something like MIRBSD_NATIVE?  */
+    }
+    if (evv == 1) {
+      if (honour_copts == 0) {
+        error ("someone does not honour COPTS at all in lenient mode");
+        return false;
+      } else if (honour_copts != 1) {
+        warning (0, "someone does not honour COPTS correctly, passed %d times",
+         honour_copts);
+      }
+    } else if (evv == 2) {
+      if (honour_copts == 0) {
+        error ("someone does not honour COPTS at all in strict mode");
+        return false;
+      } else if (honour_copts != 1) {
+        error ("someone does not honour COPTS correctly, passed %d times",
+         honour_copts);
+        return false;
+      }
+    } else if (evv == 0) {
+      if (honour_copts != 1)
+        inform (0, "someone does not honour COPTS correctly, passed %d times",
+         honour_copts);
+    }
+  }
+
   return true;
 }
 
--- a/gcc/c-family/c.opt
+++ b/gcc/c-family/c.opt
@@ -431,6 +431,10 @@ Wfloat-conversion
 C ObjC C++ ObjC++ Var(warn_float_conversion) LangEnabledBy(C ObjC C++ ObjC++,Wconversion)
 Warn for implicit type conversions that cause loss of floating point precision
 
+Werror-maybe-reset
+C ObjC C++ ObjC++
+; Documented in common.opt
+
 Wfloat-equal
 C ObjC C++ ObjC++ Var(warn_float_equal) Warning
 Warn if testing floating point numbers for equality
@@ -1161,6 +1165,9 @@ C++ ObjC++ Optimization Alias(fexception
 fhonor-std
 C++ ObjC++ Ignore Warn(switch %qs is no longer supported)
 
+fhonour-copts
+C ObjC C++ ObjC++ RejectNegative
+
 fhosted
 C ObjC
 Assume normal C execution environment
--- a/gcc/common.opt
+++ b/gcc/common.opt
@@ -561,6 +561,10 @@ Werror=
 Common Joined
 Treat specified warning as error
 
+Werror-maybe-reset
+Common
+If environment variable GCC_NO_WERROR is set, act as -Wno-error
+
 Wextra
 Common Var(extra_warnings) Warning
 Print extra (possibly unwanted) warnings
@@ -1360,6 +1364,9 @@ fguess-branch-probability
 Common Report Var(flag_guess_branch_prob) Optimization
 Enable guessing of branch probabilities
 
+fhonour-copts
+Common RejectNegative
+
 ; Nonzero means ignore `#ident' directives.  0 means handle them.
 ; Generate position-independent code for executables if possible
 ; On SVR4 targets, it also controls whether or not to emit a
--- a/gcc/opts.c
+++ b/gcc/opts.c
@@ -1699,6 +1699,17 @@ common_handle_option (struct gcc_options
 			       opts, opts_set, loc, dc);
       break;
 
+    case OPT_Werror_maybe_reset:
+      {
+        char *ev = getenv ("GCC_NO_WERROR");
+        if ((ev != NULL) && (*ev != '0'))
+          warnings_are_errors = 0;
+      }
+      break;
+
+    case OPT_fhonour_copts:
+      break;
+
     case OPT_Wlarger_than_:
       opts->x_larger_than_size = value;
       opts->x_warn_larger_than = value != -1;
--- a/gcc/doc/cppopts.texi
+++ b/gcc/doc/cppopts.texi
@@ -163,6 +163,11 @@ in older programs.  This warning is on b
 Make all warnings into hard errors.  Source code which triggers warnings
 will be rejected.
 
+@item -Werror-maybe-reset
+@opindex Werror-maybe-reset
+Act like @samp{-Wno-error} if the @env{GCC_NO_WERROR} environment
+variable is set to anything other than 0 or empty.
+
 @item -Wsystem-headers
 @opindex Wsystem-headers
 Issue warnings for code in system headers.  These are normally unhelpful
--- a/gcc/doc/invoke.texi
+++ b/gcc/doc/invoke.texi
@@ -251,7 +251,7 @@ Objective-C and Objective-C++ Dialects}.
 -Wdisabled-optimization @gol
 -Wno-discarded-qualifiers -Wno-discarded-array-qualifiers @gol
 -Wno-div-by-zero -Wdouble-promotion -Wempty-body  -Wenum-compare @gol
--Wno-endif-labels -Werror  -Werror=* @gol
+-Wno-endif-labels -Werror  -Werror=* -Werror-maybe-reset @gol
 -Wfatal-errors  -Wfloat-equal  -Wformat  -Wformat=2 @gol
 -Wno-format-contains-nul -Wno-format-extra-args -Wformat-nonliteral @gol
 -Wformat-security  -Wformat-signedness  -Wformat-y2k @gol
@@ -5382,6 +5382,22 @@ This option is only supported for C and
 @option{-Wall} and by @option{-Wpedantic}, which can be disabled with
 @option{-Wno-pointer-sign}.
 
+@item -Werror-maybe-reset
+@opindex Werror-maybe-reset
+Act like @samp{-Wno-error} if the @env{GCC_NO_WERROR} environment
+variable is set to anything other than 0 or empty.
+
+@item -fhonour-copts
+@opindex fhonour-copts
+If @env{GCC_HONOUR_COPTS} is set to 1, abort if this option is not
+given at least once, and warn if it is given more than once.
+If @env{GCC_HONOUR_COPTS} is set to 2, abort if this option is not
+given exactly once.
+If @env{GCC_HONOUR_COPTS} is set to 0 or unset, warn if this option
+is not given exactly once.
+The warning is quelled if @env{GCC_HONOUR_COPTS} is set to @samp{s}.
+This flag and environment variable only affect the C language.
+
 @item -Wstack-protector
 @opindex Wstack-protector
 @opindex Wno-stack-protector
@@ -7860,7 +7876,7 @@ so, the first branch is redirected to ei
 second branch or a point immediately following it, depending on whether
 the condition is known to be true or false.
 
-Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.
+Enabled at levels @option{-O3}.
 
 @item -fsplit-wide-types
 @opindex fsplit-wide-types
--- a/gcc/java/jvspec.c
+++ b/gcc/java/jvspec.c
@@ -629,6 +629,7 @@ lang_specific_pre_link (void)
      class name.  Append dummy `.c' that can be stripped by set_input so %b
      is correct.  */ 
   set_input (concat (main_class_name, "main.c", NULL));
+  putenv ("GCC_HONOUR_COPTS=s"); /* XXX hack!  */
   err = do_spec (jvgenmain_spec);
   if (err == 0)
     {
