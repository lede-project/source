From 81ce37d6c90e79f2c6810bed8216d6215c9a6734 Mon Sep 17 00:00:00 2001
From: mimmoLinino <mimmo@linino.org>
Date: Fri, 23 Dec 2016 15:44:30 +0100
Subject: [PATCH 11/21] fix read non-blocking

---
 libloragw/src/loragw_spi-stm32.c | 35 ++++++++---------------------------
 1 file changed, 8 insertions(+), 27 deletions(-)

diff --git a/libloragw/src/loragw_spi-stm32.c b/libloragw/src/loragw_spi-stm32.c
index c86af82..c6649b2 100644
--- a/libloragw/src/loragw_spi-stm32.c
+++ b/libloragw/src/loragw_spi-stm32.c
@@ -81,8 +81,8 @@ ssize_t read_spi(int fd, void *buf, size_t count)
 		int timeout = 0;
 		do {
 		int n = read(fd, (void*)(buf + nr), 1);
-		nr += n;
-		if (n==0) { DEBUG_MSG("."); ++timeout; }
+		if (n > 0) nr += n;
+		if (n <= 0) { DEBUG_MSG("."); ++timeout; }
 		} while ((nr < count)&&(timeout<READ_TIMEOUT));
 		return nr;
 }
@@ -216,25 +216,6 @@ int disable_CS(int dev)
 	return ret;
 }
 
-
-
-int lgw_spi_loop_cs(void *spi_target) {
-    
-    int spi_device = *(int *)spi_target; /* must check that spi_target is not null beforehand */
-    
-    DEBUG_PRINTF("Openened dev:%d\n", spi_device);
-    for (int ii=0; ii<10000; ++ii)
-    {
-		if (enable_CS(spi_device) != 0)
-			DEBUG_MSG("**ERROR ENABLE CS **\n");
-		sleep(1);
-		if (disable_CS(spi_device) != 0)
-			DEBUG_MSG("**ERROR DISABLE CS **\n");
-		sleep(1);
-	}
-}
-
-
 /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
 
 /* Simple write */
@@ -244,7 +225,7 @@ int lgw_spi_w(void *spi_target, uint8_t spi_mux_mode, uint8_t spi_mux_target, ui
     uint8_t command_size;
     int nw, nr;
 
-    DEBUG_MSG("\n**SIMPLE WRITE ** - ");
+    //DEBUG_MSG("\n**SIMPLE WRITE ** - ");
     /* check input variables */
     CHECK_NULL(spi_target);
     if ((address & 0x80) != 0) {
@@ -278,7 +259,7 @@ int lgw_spi_w(void *spi_target, uint8_t spi_mux_mode, uint8_t spi_mux_target, ui
         DEBUG_MSG("[FAIL]\n");
         return LGW_SPI_ERROR;
     } else {
-        DEBUG_MSG("[ OK ]\n");
+        //DEBUG_MSG("[ OK ]\n");
         return LGW_SPI_SUCCESS;
     }
 }
@@ -318,6 +299,7 @@ int lgw_spi_r(void *spi_target, uint8_t spi_mux_mode, uint8_t spi_mux_target, ui
     enable_CS(spi_device);
     nw = write(spi_device, &out_buf[0], command_size);
     nr = read_spi(spi_device, &in_buf[0], command_size);
+    
 	disable_CS(spi_device);
 
     /* determine return code */
@@ -328,7 +310,7 @@ int lgw_spi_r(void *spi_target, uint8_t spi_mux_mode, uint8_t spi_mux_target, ui
         ERROR_MSG("[FAIL]\n");
         return LGW_SPI_ERROR;
     } else {
-        DEBUG_MSG("[ OK ]\n");
+        //DEBUG_MSG("[ OK ]\n");
         *data = in_buf[command_size - 1];
         return LGW_SPI_SUCCESS;
     }
@@ -402,7 +384,7 @@ int lgw_spi_wb(void *spi_target, uint8_t spi_mux_mode, uint8_t spi_mux_target, u
         ERROR_MSG("[FAIL]\n");
         return LGW_SPI_ERROR;
     } else {
-        DEBUG_MSG("[ OK ]\n");
+        //DEBUG_MSG("[ OK ]\n");
         return LGW_SPI_SUCCESS;
     }
 }
@@ -488,7 +470,6 @@ int lgw_spi_rb(void *spi_target, uint8_t spi_mux_mode, uint8_t spi_mux_target, u
         //DEBUG_PRINTF("BURST READ: to trans %d # chunk %d # transferred %d \n", size_to_do, chunk_size, byte_transfered);
         size_to_do -= chunk_size; /* subtract the quantity of data already transferred */
     }
-
 	disable_CS(spi_device);
     /* determine return code */
     if (byte_transfered != size) {
@@ -496,7 +477,7 @@ int lgw_spi_rb(void *spi_target, uint8_t spi_mux_mode, uint8_t spi_mux_target, u
         ERROR_MSG("[FAIL]\n");
         return LGW_SPI_ERROR;
     } else {
-        DEBUG_MSG("[OK]\n");
+        //DEBUG_MSG("[OK]\n");
         return LGW_SPI_SUCCESS;
     }
 }
-- 
2.11.0

