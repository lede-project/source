From 53467b60aaf4bece77a07319e5eece83f0422ee2 Mon Sep 17 00:00:00 2001
From: mimmoLinino <mimmo@linino.org>
Date: Tue, 6 Dec 2016 10:55:49 +0100
Subject: [PATCH 07/21] reduce chunk to 32

---
 libloragw/inc/loragw_spi.h       |  2 +-
 libloragw/src/loragw_spi-stm32.c | 16 +++++++++++++---
 libloragw/tst/test_loragw_spi.c  |  6 +++---
 3 files changed, 17 insertions(+), 7 deletions(-)

diff --git a/libloragw/inc/loragw_spi.h b/libloragw/inc/loragw_spi.h
index 46f5304..2c2345a 100644
--- a/libloragw/inc/loragw_spi.h
+++ b/libloragw/inc/loragw_spi.h
@@ -33,7 +33,7 @@ Maintainer: Sylvain Miermont
 
 #define LGW_SPI_SUCCESS     0
 #define LGW_SPI_ERROR       -1
-#define LGW_BURST_CHUNK     64
+#define LGW_BURST_CHUNK     32
 
 #define LGW_SPI_MUX_MODE0   0x0     /* No FPGA */
 #define LGW_SPI_MUX_MODE1   0x1     /* FPGA, with spi mux header */
diff --git a/libloragw/src/loragw_spi-stm32.c b/libloragw/src/loragw_spi-stm32.c
index 7b6a76f..5609a20 100644
--- a/libloragw/src/loragw_spi-stm32.c
+++ b/libloragw/src/loragw_spi-stm32.c
@@ -121,6 +121,7 @@ int lgw_spi_w(void *spi_target, uint8_t spi_mux_mode, uint8_t spi_mux_target, ui
     uint8_t command_size;
     int nw, nr;
 
+	DEBUG_MSG("\n**SIMPLE WRITE **\n");
     /* check input variables */
     CHECK_NULL(spi_target);
     if ((address & 0x80) != 0) {
@@ -166,6 +167,7 @@ int lgw_spi_r(void *spi_target, uint8_t spi_mux_mode, uint8_t spi_mux_target, ui
     uint8_t in_buf[ARRAY_SIZE(out_buf)];
     int nw, nr;
 
+	DEBUG_MSG("\n**SIMPLE READ **\n");
     /* check input variables */
     CHECK_NULL(spi_target);
     if ((address & 0x80) != 0) {
@@ -214,6 +216,7 @@ int lgw_spi_wb(void *spi_target, uint8_t spi_mux_mode, uint8_t spi_mux_target, u
     int byte_transfered = 0;
     int i, nw, nr;
 
+	DEBUG_MSG("\n**BURST MULTIPLE WRITE **\n");
     /* check input parameters */
     CHECK_NULL(spi_target);
     if ((address & 0x80) != 0) {
@@ -252,8 +255,11 @@ int lgw_spi_wb(void *spi_target, uint8_t spi_mux_mode, uint8_t spi_mux_target, u
         chunk_size = (size_to_do < LGW_BURST_CHUNK) ? size_to_do : LGW_BURST_CHUNK;
         offset = i * LGW_BURST_CHUNK;
         nw = write(spi_device, &data[offset], chunk_size);
+        //fsync(spi_device);
+        DEBUG_PRINTF("INFO: %d] written n.bytes %d\n", i, nw);
         byte_transfered += nw;
-		nr = read(spi_device, &dummy[offset], chunk_size);
+		nr = read(spi_device, &dummy[0], chunk_size);
+		DEBUG_PRINTF("INFO: %d] read n.bytes %d\n", i, nr);
         DEBUG_PRINTF("BURST WRITE: to trans %d # chunk %d # transferred %d \n", size_to_do, chunk_size, byte_transfered);
         size_to_do -= chunk_size; /* subtract the quantity of data already transferred */
     }
@@ -280,6 +286,7 @@ int lgw_spi_rb(void *spi_target, uint8_t spi_mux_mode, uint8_t spi_mux_target, u
     int byte_transfered = 0;
     int i, nw, nr;
 
+	DEBUG_MSG("\n**BURST MULTIPLE READ **\n");
     /* check input parameters */
     CHECK_NULL(spi_target);
     if ((address & 0x80) != 0) {
@@ -306,7 +313,7 @@ int lgw_spi_rb(void *spi_target, uint8_t spi_mux_mode, uint8_t spi_mux_target, u
     nw = write(spi_device, &command[0], command_size);
     /* determine return code */
     if (nw != command_size) {
-        DEBUG_MSG("ERROR: SPI BURST WRITE FAILURE\n");
+        DEBUG_MSG("ERROR: SPI BURST READ FAILURE\n");
         return LGW_SPI_ERROR;
 	}
 	DEBUG_PRINTF("INFO: written n.bytes %d\n", nw);
@@ -318,10 +325,13 @@ int lgw_spi_rb(void *spi_target, uint8_t spi_mux_mode, uint8_t spi_mux_target, u
         chunk_size = (size_to_do < LGW_BURST_CHUNK) ? size_to_do : LGW_BURST_CHUNK;
         offset = i * LGW_BURST_CHUNK;
         nw = write(spi_device, &dummy[offset], chunk_size);
+        //fsync(spi_device);
+        DEBUG_PRINTF("INFO: %d] written n.bytes %d\n", i, nw);
         nr = read(spi_device, &data[offset], chunk_size);
+        DEBUG_PRINTF("INFO: %d] read n.bytes %d\n", i, nr);
         byte_transfered += nr;
 
-        DEBUG_PRINTF("BURST WRITE: to trans %d # chunk %d # transferred %d \n", size_to_do, chunk_size, byte_transfered);
+        DEBUG_PRINTF("BURST READ: to trans %d # chunk %d # transferred %d \n", size_to_do, chunk_size, byte_transfered);
         size_to_do -= chunk_size; /* subtract the quantity of data already transferred */
     }
 
diff --git a/libloragw/tst/test_loragw_spi.c b/libloragw/tst/test_loragw_spi.c
index 2260362..553a2a3 100644
--- a/libloragw/tst/test_loragw_spi.c
+++ b/libloragw/tst/test_loragw_spi.c
@@ -53,7 +53,7 @@ int main()
 
     printf("Beginning of test for loragw_spi.c\n");
     lgw_spi_open(&spi_target);
-#if 0
+#if 1
     /* normal R/W test */
     for (i = 0; i < TIMING_REPEAT; ++i)
         lgw_spi_w(spi_target, spi_mux_mode, LGW_SPI_MUX_TARGET_SX1301, 0xAA, 0x96);
@@ -61,7 +61,7 @@ int main()
     for (i = 0; i < TIMING_REPEAT; ++i)
         lgw_spi_r(spi_target, spi_mux_mode, LGW_SPI_MUX_TARGET_SX1301, 0x55, &data);
 #endif
-#if 0
+#if 1
     /* burst R/W test, small bursts << LGW_BURST_CHUNK */
     for (i = 0; i < TIMING_REPEAT; ++i)
         lgw_spi_wb(spi_target, spi_mux_mode, LGW_SPI_MUX_TARGET_SX1301, 0x55, dataout, 16);
@@ -70,7 +70,7 @@ int main()
         lgw_spi_rb(spi_target, spi_mux_mode, LGW_SPI_MUX_TARGET_SX1301, 0x55, datain, 16);
 #endif
     /* burst R/W test, large bursts >> LGW_BURST_CHUNK */
-#if 0
+#if 1
     for (i = 0; i < TIMING_REPEAT; ++i)
         lgw_spi_wb(spi_target, spi_mux_mode, LGW_SPI_MUX_TARGET_SX1301, 0x5A, dataout, ARRAY_SIZE(dataout));
 #endif
-- 
2.11.0

